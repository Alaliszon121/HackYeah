//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/GameInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""8c75e31f-692c-47a9-b646-d5de6148260a"",
            ""actions"": [
                {
                    ""name"": ""PlayA"",
                    ""type"": ""Button"",
                    ""id"": ""d2b19c3d-2343-4a1d-968e-152d8fd05f76"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayB"",
                    ""type"": ""Button"",
                    ""id"": ""23b06da8-d0bd-488a-bd11-48f6b87694ef"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayC"",
                    ""type"": ""Button"",
                    ""id"": ""d093a642-7ed3-4f2d-a84e-6b0a1ced7d91"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayD"",
                    ""type"": ""Button"",
                    ""id"": ""732ff8b0-c866-441b-8ce2-32f799fb9cc7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""71fdce13-9505-41a0-b5b4-9687d720248c"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ede392d-fe16-4bc9-aa7b-5857fbf48cbb"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""316d53ce-8572-4ad4-952a-c82026ae10b2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9401627-75c3-4762-b29c-b728c4b03e73"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b45095ec-e1a5-44f3-9791-a3732f256de2"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13b43463-d90a-4539-b882-4ffa0987bdfa"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dca48ce4-e1fe-4d23-b10e-9ea27e8c9726"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e2439fb-b446-4e9e-9d14-d32fc3e8566b"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_PlayA = m_Player.FindAction("PlayA", throwIfNotFound: true);
        m_Player_PlayB = m_Player.FindAction("PlayB", throwIfNotFound: true);
        m_Player_PlayC = m_Player.FindAction("PlayC", throwIfNotFound: true);
        m_Player_PlayD = m_Player.FindAction("PlayD", throwIfNotFound: true);
    }

    ~@GameInputActions()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, GameInputActions.Player.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_PlayA;
    private readonly InputAction m_Player_PlayB;
    private readonly InputAction m_Player_PlayC;
    private readonly InputAction m_Player_PlayD;
    public struct PlayerActions
    {
        private @GameInputActions m_Wrapper;
        public PlayerActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlayA => m_Wrapper.m_Player_PlayA;
        public InputAction @PlayB => m_Wrapper.m_Player_PlayB;
        public InputAction @PlayC => m_Wrapper.m_Player_PlayC;
        public InputAction @PlayD => m_Wrapper.m_Player_PlayD;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @PlayA.started += instance.OnPlayA;
            @PlayA.performed += instance.OnPlayA;
            @PlayA.canceled += instance.OnPlayA;
            @PlayB.started += instance.OnPlayB;
            @PlayB.performed += instance.OnPlayB;
            @PlayB.canceled += instance.OnPlayB;
            @PlayC.started += instance.OnPlayC;
            @PlayC.performed += instance.OnPlayC;
            @PlayC.canceled += instance.OnPlayC;
            @PlayD.started += instance.OnPlayD;
            @PlayD.performed += instance.OnPlayD;
            @PlayD.canceled += instance.OnPlayD;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @PlayA.started -= instance.OnPlayA;
            @PlayA.performed -= instance.OnPlayA;
            @PlayA.canceled -= instance.OnPlayA;
            @PlayB.started -= instance.OnPlayB;
            @PlayB.performed -= instance.OnPlayB;
            @PlayB.canceled -= instance.OnPlayB;
            @PlayC.started -= instance.OnPlayC;
            @PlayC.performed -= instance.OnPlayC;
            @PlayC.canceled -= instance.OnPlayC;
            @PlayD.started -= instance.OnPlayD;
            @PlayD.performed -= instance.OnPlayD;
            @PlayD.canceled -= instance.OnPlayD;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnPlayA(InputAction.CallbackContext context);
        void OnPlayB(InputAction.CallbackContext context);
        void OnPlayC(InputAction.CallbackContext context);
        void OnPlayD(InputAction.CallbackContext context);
    }
}
